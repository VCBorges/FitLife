[tool.poetry]
name = "FitLife"
version = "0.1.0"
description = ""
authors = ["VCBorges <vinicius.costa.borges98@gmail.com>"]
readme = "README.md"


[tool.poetry.dependencies]
python = "^3.12"
django = "^5.0.7"
psycopg2-binary = "^2.9.9"
django-allauth = {extras = ["socialaccount"], version = "^0.63.6"}
django-cotton = "^0.9.33"
whitenoise = "^6.8.2"
gunicorn = "^23.0.0"
python-dotenv = "^1.0.1"
dj-database-url = "^2.3.0"


[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-django = "^4.8.0"
rich = "^13.7.1"
ruff = "^0.6.3"
pre-commit = "^3.7.1"
factory-boy = "^3.3.0"
ipython = "^8.26.0"
django-extensions = "^3.2.3"
django-browser-reload = "^1.13.0"
ipykernel = "^6.29.5"
djangorestframework = "^3.15.2"
pydantic = "^2.8.2"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings"
python_files = ["test_*.py"]
addopts = [
    "-vv", 
    "-s",
    "--reuse-db",
    "-p no:warnings",
]

[tool.ruff]
exclude = [
    ".venv",
    "node_modules",
    "*.ipynb",
]

# Same as Black.
line-length = 88

# Assume Python 3.8
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",
    "E7",
    "E9",
    "F",
    "I",
    "DJ",
]
ignore = ["DJ001"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []


# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


# [tool.ruff.isort]
# known-third-party = [
#     "dynaconf",
# ]

[tool.ruff.lint.isort.sections]
# Group all Django imports into a separate section.
"django" = ["django"]

[tool.ruff.lint.isort]
section-order = [
    "future",
    "standard-library",
    "django",
    "first-party",
    "local-folder",
    "third-party",
]
